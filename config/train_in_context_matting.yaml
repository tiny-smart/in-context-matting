model:
  target: icm.models.in_context_matting.InContextMatting

  params:
    learning_rate: 0.0001

    # which layer to use for matting
    feature_index: 6
    use_scheduler: True
    train_adapter_params: False
    context_type: "embed" # "embed" or "maskpooling"
    scheduler_config:
      target: icm.lr_scheduler.LambdaLinearScheduler
      params:
        warm_up_steps: [1] # NOTE for resuming. use 10000 if starting from scratch
        cycle_lengths: [10000000000000]
        f_start: [1.e-6]
        f_max: [1.]
        f_min: [1.]

    cfg_feature_extractor:
      load_odise_params: False # True only if init_ckpt is sd-v1.3
      target: icm.models.feature_extractor.modeling.meta_arch.ldm.LdmImplicitCaptionerExtractor
      params:
        encoder_block_indices: [1, 3, 5, 7]
        # 128*512*512 256*256*256 512*128*128 512*64*64
        unet_block_indices: [2, 5, 8, 11]
        # 2560*8*8 1920*16*16 960*32*32 640*64*64
        decoder_block_indices: [2, 5, 8, 11]
        # 512*64*64 512*128*128 256*256*256 128*512*512
        steps: [0]
        learnable_time_embed: True
        num_timesteps: 1
        clip_model_name: "ViT-L-14-336"

        # set alpha, clip_project, time_embed_project require_grad=False
        freeze_all_params: True

        # diffusion-matte with sd://v2-1-base, odise with sd://v1-3"(init)
        init_checkpoint: "sd://v2-1-base"
        # if loading is slow, fix the clip model. /home/guohe/anaconda3/envs/icm/lib/python3.9/site-packages/ldm/modules/encoders/modules.py
        #                         and clip adaptor /data1/guohe/diffusion-matting/ICM/icm/models/feature_extractor/modeling/meta_arch/clip.py

        # "sd://v1-3": ("v1-inference.yaml", (512, 512), (64, 64)),
        # "sd://v1-4": ("v1-inference.yaml", (512, 512), (64, 64)),
        # "sd://v1-5": ("v1-inference.yaml", (512, 512), (64, 64)),
        # "sd://v2-0-base": ("v2-inference.yaml", (512, 512), (64, 64)),
        # "sd://v2-0-v": ("v2-inference.yaml", (768, 768), (96, 96)),
        # "sd://v2-1-base": ("v2-inference.yaml", (512, 512), (64, 64)),
        # "sd://v2-1-v": ("v2-inference.yaml", (768, 768), (96, 96)),
        # "sd://x4-0-base": ("x4-upscaling.yaml", (2048, 2048), (512, 512)),

    cfg_decoder:
      target: icm.models.decoder.context_decoder.ContextDecoder
      params:
        in_chans: 960
        img_chans: 3
        n_heads: 1
        convstream_out: [48, 96, 192]
        fusion_out: [256, 128, 64, 32]
        use_context: True

data:
  target: icm.data.data_module.DataModuleFromConfig
  params:
    # train_batch_size is set here, validation_batch_size is 1
    batch_size: 8
    # train_loader_num_workers is set here, validation_loader_num_workers is 0
    num_workers: 4
    shuffle_train: False
    train:
      target: icm.data.data_generator.ContextDataset
      params:
        crop_size: 512
        phase: train
        data:
          target: icm.data.image_file.ContextData
          params:
            ratio: 0.9
            dataset_name:
              ["open-images-test"] # ["PPM", "AM2k", "RWP636", "P3M_val_np"]
    validation:
      target: icm.data.data_generator.ContextDataset
      params:
        crop_size: 512
        phase: val
        data:
          target: icm.data.image_file.ContextData
          params:
            ratio: 0.9
            dataset_name:
              ["open-images-test"]

trainer:
  accelerator: "ddp"
  gpus: 4
  max_epochs: 1000
  auto_select_gpus: False
  num_sanity_val_steps: 0
  # weights_summary: full

  cfg_logger:
    target: pytorch_lightning.loggers.tensorboard.TensorBoardLogger
    params:
      save_dir: logs # set in main.py
      default_hp_metric: False

  cfg_callbacks:
    modelcheckpoint:
      target: pytorch_lightning.callbacks.ModelCheckpoint
      params:
        monitor: epoch
        mode: max
        save_top_k: 100
        every_n_epochs: 1
        # save_last: True
        # save_weights_only: False
        filename: "{epoch:02d}-{val/mse_all:.5f}-{val/mse_unknown:.5f}"
        auto_insert_metric_name: False
